#include <'base'> // 声明结构文件


/--
 Grabber基本教学
--/


class base {

    pre {
        int x = 0
    }

    

    /--
     Grabber声明对象或者是变量
     使用set声明一个可变的变量或者是对象
     使用const声明一个不可变且全局的变量或者是对象
    --/

    /--
     Grabber中的基本数据类型
     ----------------------------------------------------
     | int      表示一个整数                              |
     | uint     表示一个无符号的整数类型，整数定义为10U       |
     | long     表示一个长整数，整数定义为10L               |
     | bool     表示一个布尔值                            |
     | decimal  表示一个小数                              |
     | char     表示一个字符                              |
     | byte     表示一个字节bit                           |
     ----------------------------------------------------
    --/

    
    int         in       = 10

    uint        ui       = 10U

    long        lo       = 10L

    bool        bo       = true

    decimal     de       = 1.00

    char        ch       = 'a'

    byte        by       = 0

    

    /--
     Grabber中的其他常用的数据结构和类型

     String           表示为一个由char数组组成的字符串
     Array            表示一个数组，使用<$>作为尾插入符
     JSON             表示json，Grabber支持JOSN作为数据结构
    --/

    /--
     声明一个String类型
    --/

    
    set         str         = "string"

    

    /--
     声明一个数组
    --/

    
    set         arr         = {}

    

    /--
     声明一个json
    --/

    
    set         jso         = {K,V}

    // 或者是这样声明一个json
    // set         jso1        = {"name":"zs"}

    

    /--
     声明一个Map
    --/

    /--
     声明可变的变量
    --/

    
    set name = "张三"

    

    /--
     声明一个不可变的变量
    --/

    
    set money = 0

    

    /--
     默认为公开的，谁都可以new。
     如果是这样进行修饰了，那么就代表这个类只能在本类被new出来
     其他的权限修饰符也是一样的。
     假设要Base类公开就去掉这段代码即可
    --/

    
    feat Base(): private

    

    /--
     有参数的构造器
     如果使用@value注解，那么则代表该方法的参数会赋值给
     结构体文件或者是当前类中的全局变量上，前提是变量名称得一致。
    --/

    
    @value
    feat Base(value) {}

    feat value {}

    feat getValue0() {}

}